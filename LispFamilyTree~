;;;; -*- Mode: Lisp; -*- 
(print "Hello World")
(setf testCases (list '(E A B AB)))
(setf testCases(append testCases (list '(E A D AD))))
(setf testCases(append testCases (list '(E A C AC))))
(setf testCases(append testCases (list '(E C D CD))))
(setf testCases(append testCases (list '(E AC CD ACCD))))
(setf testCases(append testCases (list '(E AD CD ADCD))))

(setf testCases(append testCases (list '(E E F EF))))
(setf testCases(append testCases (list '(E G H GH))))
(setf testCases(append testCases (list '(E CD EF CDEF))))
(setf testCases(append testCases (list '(E EF FG EFFG))))
(setf testCases(append testCases (list '(E A E))))
(setf testCases(append testCases (list '(E I J IJ))))
(setf testCases(append testCases (list '(W A Spouse B))))
(setf testCases(append testCases (list '(W C Parent CD))))
(setf testCases(append testCases (list '(W AC Sibling AD))))
(setf testCases(append testCases (list '(W A Parent AC))))
(setf testCases(append testCases (list '(W A Ancestor AC))))
(setf testCases(append testCases (list '(W A Ancestor ACCD))))
(setf testCases(append testCases (list '(W AD Ancestor ACCD))))
(setf testCases(append testCases (list '(W AD Cousin ACCD))))
(setf testCases(append testCases (list '(W ACCD Ancestor AC))))
(setf testCases(append testCases (list '(W ACCD Cousin AC))))
(setf testCases(append testCases (list '(W AC Ancestor ACCD))))
(setf testCases(append testCases (list '(W AC Cousin ACCD))))
(setf testCases(append testCases (list '(W CDEF Ancestor ACCD))))
(setf testCases(append testCases (list '(W CDEF Cousin ACCD))))
(setf testCases(append testCases (list '(W IJ Cousin AC))))
(setf testCases(append testCases (list '(W IJ Unrelated AC))))
(setf testCases(append testCases (list '(W AC Unrelated AC))))
(setf testCases(append testCases (list '(W ACCD Unrelated A))))
(setf testCases(append testCases (list '(X Unrelated A))))
(setf testCases(append testCases (list '(X Ancestor ACCD))))
(setf testCases(append testCases (list '(X Cousin ACCD))))
(setf testCases(append testCases (list '(X Sibling AC))))
(setf testCases(append testCases (list '(X Parent AC))))

(defun empty (input)
  (print input)
  )
(defun DummyFunction (person1 person2 person3 tree)
  (print person1)
  (print person2)
  (print person3)

  )
(defun isRelation (person1 relation person2 tree)
  ;(print relation)
  ; child, spouse, sibling, ancestor, cousin, unrelated
  (if (string= relation "SPOUSE") (print (isSpouse person1 person2 tree)) )
  (if (string= relation "PARENT") (print (isParent person1 person2 tree)) )
  (if (string= relation "SIBLING") (print (isSibling person1 person2 tree)) )
  (if (string= relation "CHILD") (print (isParent person2 person1 tree)) )
  (if (string= relation "ANCESTOR") (print (isAncestor person1 person2 tree) ))
  (if (string= relation "COUSIN") (print (isCousin person1 person2 tree)) )
  (if (string= relation "UNRELATED") (print (unRelated person1 person2 tree)))
  )
(defun isRelationBool (person1 relation person2 tree)
  ;(print relation)
  ; child, spouse, sibling, ancestor, cousin, unrelated
  (setf re "Yes")
  (if (string= relation "SPOUSE") (setf re (isSpouse person1 person2 tree)) )
  (if (string= relation "PARENT") (setf re (isParent person2 person1 tree)) )
  (if (string= relation "SIBLING") (setf re (isSibling person1 person2 tree)) )
  (if (string= relation "CHILD") (setf re (isParent person1 person2 tree)) )
  (if (string= relation "ANCESTOR") (setf re (isAncestor person2 person1 tree) ))
  (if (string= relation "COUSIN") (setf re (isCousin person1 person2 tree)) )
  (if (string= relation "UNRELATED") (setf re (unRelated person1 person2 tree)))
  (return-from isRelationBool re)
  )
(defun isSpouse (person1 person2 tree)
  ;(print "isSpouse function")
  ;(print (person-spouses (gethash person2 tree)))
 ; (print (person-name (gethash person2 tree)))
  ;(print person2)
  ;(print (person-spouses (gethash person1 tree)))
  (setf spouseval "No")
  (if (member person1  (person-spouses (gethash person2 tree)) :test #'equal) (setf spouseval "Yes"))
  (if (member person2  (person-spouses (gethash person1 tree)) :test #'equal) (setf spouseval "Yes"))
  (print spouseval)
  )
(defun isSibling (person1 person2 tree)
  (setf Sval "No")
  (loop for x in (person-parents (gethash person2 tree)) do (if (member x (person-parents (gethash person1 tree))) (setf Sval "Yes")))
  (if (EQUAL person1 person2) (setf Sval "No"))
  (return-from isSibling Sval)
  )
(defun isParent (person1 person2 tree)
  (setf Pval "No")
  (if (member person1  (person-parents (gethash person2 tree)) :test #'equal) (setf Pval "Yes"))
  (return-from isParent Pval)
  )
(defun isAncestor (person1 person2 tree)
  (setf Aval "No")
  ;(print person1)
  ;(print (ancestors (gethash person2 tree) tree))
  (if (member (gethash person1 tree) (ancestors (gethash person2 tree) tree) :test #'equal) (setf Aval "Yes"))
  (return-from isAncestor Aval)

  )
(defun isCousin (person1 person2 tree)
  (setf Cval "No")
  (loop for x in (ancestors (gethash person2 tree) tree) do (if (member x (ancestors (gethash person1 tree) tree) :test #'equal) (setf Cval "Yes")))
  (loop for x in (ancestors (gethash person1 tree) tree) do (if (member x (ancestors (gethash person2 tree) tree) :test #'equal) (setf Cval "Yes")))
  ;(print val)
  (if (EQUAL (isAncestor person1 person2 tree) "Yes") (setf Cval "No") )
  (if (EQUAL (isAncestor person2 person1 tree) "Yes") (setf Cval "No") )
  (return-from isCousin Cval)
  )
(defun isRelated (person1 person2 tree)
  (setf rval "No")
  (if (EQUAL (isAncestor person1 person2 tree) "Yes") (setf rval "Yes"))
  (if (EQUAL (isCousin person1 person2 tree) "Yes") (setf rval "Yes"))
  (if (EQUAL (isSibling person1 person2 tree) "Yes") (setf rval "Yes"))
  (if (EQUAL (isAncestor person2 person1 tree) "Yes") (setf rval "Yes"))
  (if (EQUAL (isCousin person2 person1 tree) "Yes") (setf rval "Yes"))
  (if (EQUAL (isSibling person2 person1 tree) "Yes") (setf rval "Yes"))
  (if (EQUAL person1 person2) (setf rval "No"))
  ;(print rval)
  (return-from isRelated rval)
  )
(defun unRelated (person1 person2 tree)
  (setf uval "Yes")
  (if (EQUAL (isRelated person1 person2 tree) "Yes") (setf uval "No"))
  (return-from unRelated uval)
  )
(defun printAll (person1 relation tree)
  (setf results (list))
  (loop for x being the hash-keys of tree do(if (Equal (isRelationBool person1 relation x tree) "Yes") (setf results(append results (list x))) ))
  (setf results (sort (results #'string)))
  (loop for y in results do(print y))
  )

(defun childMarriage (person1 person2 person3 tree)
  (Marriage person1 person2 tree)
  (storeperson person3 (make-person :name person3) tree)
  (parent person3 person1 person2 tree)
  )
(defun Marriage (person1 person2 tree)
  (if (not (gethash person1 tree))
      (storeperson person1 (make-person :name person1) tree )
    )
  (if (not (gethash person2 tree))
      (storeperson person2 (make-person :name person2) tree )
    )
  (spouse person1 person2 tree)
  (spouse person2 person1 tree)
  )
(defstruct person 
  (name nil)
  (parents (list))
  (spouses (list)) 
  )
(defun spouse (person1 spouse tree)
  (setf (person-spouses (gethash person1 tree)) (cons spouse (person-spouses (gethash person1 tree))))
  (setf (person-spouses (gethash person1 tree)) (sort (person-spouses (gethash person1 tree)) #'string<))
  )
(defun parent (person1 parent1 parent2 tree)
  (setf (person-parents (gethash person1 tree)) (cons parent1 (person-parents (gethash person1 tree))))
  (setf (person-parents (gethash person1 tree)) (cons parent2 (person-parents (gethash person1 tree))))
  )

(defun person-name (input)
  ;bad touchie
  )
(defun storeperson (symbol-name struct family-tree)

  "Students need to write this! This should enter the person structure in STRUCT into the hashtable in FAMILY-TREE with the key in SYMBOL-NAME."
  
  (setf (gethash symbol-name family-tree) struct))



(defun personstruct (symbol-name family-tree)

  "Returns a structure of type person corresponding to the key SYMBOL-NAME in the hashtable FAMILY-TREE. If there is no one in the tree with the name in SYMBOL-NAME, returns NIL."

  (gethash symbol-name family-tree nil))



(defun ancestors (p tree)

  "Returns a list of symbol-names of all the ancestors of P in TREE. Does not remove any duplicated names!"
  
   (let ((parent1 (personstruct (first (person-parents p)) tree))

         (parent2 (personstruct (second (person-parents p)) tree)))

     (when parent1
         (append (list  parent1 parent2)

                 (ancestors parent1 tree)

                 (ancestors parent2 tree)))))




(defun family ()

  "This is the top-level function for the whole Lisp program."

  (let ((tree (make-hash-table :size 1000 :test #'equal)))
    (print testCases)
    (loop for x in testCases 
             do ( 
             
             case (first x)
             (E (print x) (if (fourth x) (childMarriage (second x)(third x) (fourth x) tree) (Marriage (second x) (third x) tree)) 
                ;(if (not (fourth x)) (Marriage (second x) (third x) (tree)))
                )
             (W (print x) (isRelation (second x) (third x) (fourth x) tree))
             (X (print x) (printAll (third x) (second x) tree))
             
             )
     )

; body of program goes in here!

    ))